parameters:
  configurations:
    []
    # - cookbook: cookbook
    #   driver: driver
    #   platform: platform
    #   suites: [ 'suite1', 'suite2' ]

stages:
  - stage: acceptance
    displayName: Acceptance

    jobs:
      - ${{ each configuration in parameters.configurations }}:
          - ${{ each suite in configuration.suites }}:
              - job: test_${{ configuration.cookbook }}_${{ join('_', suite.name) }}
                displayName: Test ${{ configuration.cookbook }} ${{ join('-', suite.name) }}

                ${{ if eq(configuration.driver, 'vagrant') }}:
                  pool:
                    name: Default
                    demands:
                      - AZP_AGENT_CHEF_WORKSTATION
                      - AZP_AGENT_VAGRANT

                ${{ if eq(configuration.driver, 'docker') }}:
                  pool:
                    vmImage: windows-2019
                    # name: Default
                    # demands:
                    #   - AZP_AGENT_CHEF_WORKSTATION
                    #   - AZP_AGENT_DOCKER_WINDOWS

                workspace:
                  clean: all

                steps:
                  - checkout: self
                    submodules: recursive

                  - ${{ if eq(configuration.driver, 'vagrant') }}:
                      - script: |
                          vagrant --version
                          vagrant plugin list

                          vagrant box list
                          vagrant global-status
                        displayName: Initialize Vagrant

                  - ${{ if eq(configuration.driver, 'docker') }}:
                      - script: |
                          docker --version
                          docker-compose --version

                          docker image ls -a
                          docker container ls -a
                        displayName: Initialize Docker

                      - script: |
                          echo { "hosts": ["tcp://0.0.0.0:2375", "npipe://"] } > C:\ProgramData\Docker\config\daemon.json
                          net stop docker
                          net start docker
                        displayName: Configure Docker

                      - script: |
                          powershell -Command ". { iwr -useb https://omnitruck.chef.io/install.ps1 } | iex; install -project chef-workstation -version 20.9.158"
                          call refreshenv.cmd
                          chef --version

                          cd lib/test-kitchen/kitchen-docker
                          chef gem build --force kitchen-docker.gemspec
                          chef gem install --force --local kitchen-docker-2.10.0.gem
                        env:
                          CHEF_LICENSE: accept-silent
                        displayName: Initialize Chef

                  - script: |
                      call refreshenv.cmd
                      cd samples/cookbooks/${{ configuration.cookbook }}_test
                      kitchen test ${{ join('-', suite.name) }}
                    env:
                      KITCHEN_YAML: .kitchen.${{ configuration.driver }}.yml
                    displayName: Test

                  - script: |
                      call refreshenv.cmd
                      cd samples/cookbooks/${{ configuration.cookbook }}_test
                      kitchen destroy ${{ join('-', suite.name) }}
                    env:
                      KITCHEN_YAML: .kitchen.${{ configuration.driver }}.yml
                    displayName: Clean
                    condition: always()
