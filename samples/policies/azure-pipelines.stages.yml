parameters:
  configurations: []
    # - name: string
    #   platforms: [ string ]

stages:
  - stage: commit
    displayName: Commit

    jobs:
      - ${{ each configuration in parameters.configurations }}:
        - job: build_${{ replace(configuration.name, '-', '_') }}
          displayName: Build ${{ configuration.name }}

          pool:
            vmImage: ubuntu-20.04

          workspace:
            clean: all

          steps:
            - checkout: self
              submodules: recursive

            - script: |
                docker --version
                docker-compose --version

                docker container ls -a
                docker image ls -a
              displayName: Initialize Docker

            - script: |
                chmod +x ./build/chef/linux/*.sh
                docker-compose pull --quiet chef-workstation-linux
              displayName: Restore

            - script: |
                docker-compose run chef-policy-build-linux ${{ configuration.name }}
              displayName: Build

            - publish: $(Build.SourcesDirectory)/artifacts/
              displayName: Publish Artifacts
              artifact: build-${{ configuration.name }}

            - script: |
                docker-compose down --rmi local --volumes
              displayName: Clean
              condition: always()

  - stage: acceptance
    displayName: Acceptance

    jobs:
      - ${{ each configuration in parameters.configurations }}:
        - ${{ each platform in configuration.platforms }}:
          - job: test_${{ replace(configuration.name, '-', '_') }}_${{ platform }}
            displayName: Test ${{ configuration.name }} on ${{ platform }}

            ${{ if eq(platform, 'windows') }}:
              pool:
                vmImage: windows-2019

            ${{ if eq(platform, 'linux') }}:
              pool:
                vmImage: ubuntu-20.04

            workspace:
              clean: all

            steps:
              - checkout: self
                submodules: recursive

              - task: DownloadPipelineArtifact@2
                displayName: Download Artifacts
                inputs:
                  artifact: build-${{ configuration.name }}
                  path: $(Build.SourcesDirectory)/artifacts/

              - script: |
                  docker --version
                  docker-compose --version

                  docker container ls -a
                  docker image ls -a
                displayName: Initialize Docker

              - ${{ if eq(platform, 'linux') }}:
                - script: |
                    chmod +x ./build/chef/linux/*.sh
                  displayName: Restore

              - script: |
                  docker-compose pull --quiet chef-client-${{ platform }}
                displayName: Restore

              - script: |
                  docker-compose run chef-policy-run-${{ platform }} ${{ configuration.name }}
                displayName: Test

              - script: |
                  docker-compose down --rmi local --volumes
                displayName: Clean
                condition: always()
